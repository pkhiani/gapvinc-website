{"version":3,"file":"cms.bdfab30c553fec78af51.hot-update.js","sources":["webpack:///./src/templates/BlogIndex.js"],"sourcesContent":["import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { Location } from '@reach/router'\r\nimport qs from 'qs'\r\n\r\nimport PageHeader from '../components/PageHeader'\r\nimport PostSection from '../components/PostSection'\r\nimport PostCategoriesNav from '../components/PostCategoriesNav'\r\nimport Layout from '../components/Layout'\r\n\r\n/**\r\n * Filter posts by date. Feature dates will be fitered\r\n * When used, make sure you run a cronejob each day to show schaduled content. See docs\r\n *\r\n * @param {posts} object\r\n */\r\nexport const byDate = posts => {\r\n  const now = Date.now()\r\n  return posts.filter(post => Date.parse(post.date) <= now)\r\n}\r\n\r\n/**\r\n * filter posts by category.\r\n *\r\n * @param {posts} object\r\n * @param {title} string\r\n * @param {contentType} string\r\n */\r\nexport const byCategory = (posts, title, contentType) => {\r\n  const isCategory = contentType === 'postCategories'\r\n  const byCategory = post =>\r\n    post.categories &&\r\n    post.categories.filter(cat => cat.category === title).length\r\n  return isCategory ? posts.filter(byCategory) : posts\r\n}\r\n\r\n// Export Template for use in CMS preview\r\nexport const BlogIndexTemplate = ({\r\n  title,\r\n  subtitle,\r\n  featuredImage,\r\n  posts = [],\r\n  postCategories = [],\r\n  enableSearch = true,\r\n  contentType\r\n}) => (\r\n  <Location>\r\n    {({ location }) => {\r\n      let filteredPosts =\r\n        posts && !!posts.length\r\n          ? byCategory(byDate(posts), title, contentType)\r\n          : []\r\n\r\n      let queryObj = location.search.replace('?', '')\r\n      queryObj = qs.parse(queryObj)\r\n\r\n      if (enableSearch && queryObj.s) {\r\n        const searchTerm = queryObj.s.toLowerCase()\r\n        filteredPosts = filteredPosts.filter(post =>\r\n          post.frontmatter.title.toLowerCase().includes(searchTerm)\r\n        )\r\n      }\r\n\r\n      return (\r\n        <main className=\"Blog\">\r\n          <PageHeader\r\n            title={title}\r\n            subtitle={subtitle}\r\n            backgroundImage={featuredImage}\r\n          />\r\n\r\n          {!!postCategories.length && (\r\n            <section className=\"section thin\">\r\n              <div className=\"container\">\r\n                <PostCategoriesNav enableSearch categories={postCategories} />\r\n              </div>\r\n            </section>\r\n          )}\r\n\r\n          {!!posts.length && (\r\n            <section className=\"section\">\r\n              <div className=\"container\">\r\n                <PostSection posts={filteredPosts} />\r\n              </div>\r\n            </section>\r\n          )}\r\n        </main>\r\n      )\r\n    }}\r\n  </Location>\r\n)\r\n\r\n// Export Default BlogIndex for front-end\r\nconst BlogIndex = ({ data: { page, posts, postCategories } }) => (\r\n  <Layout\r\n    meta={page.frontmatter.meta || false}\r\n    title={page.frontmatter.title || false}\r\n  >\r\n    <BlogIndexTemplate\r\n      {...page}\r\n      {...page.fields}\r\n      {...page.frontmatter}\r\n      posts={posts.edges.map(post => ({\r\n        ...post.node,\r\n        ...post.node.frontmatter,\r\n        ...post.node.fields\r\n      }))}\r\n      postCategories={postCategories.edges.map(post => ({\r\n        ...post.node,\r\n        ...post.node.frontmatter,\r\n        ...post.node.fields\r\n      }))}\r\n    />\r\n  </Layout>\r\n)\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  ## Query for BlogIndex data\r\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\r\n  ## $id is processed via gatsby-node.js\r\n  ## query name must be unique to this file\r\n  query BlogIndex($id: String!) {\r\n    page: markdownRemark(id: { eq: $id }) {\r\n      ...Meta\r\n      fields {\r\n        contentType\r\n      }\r\n      frontmatter {\r\n        title\r\n        excerpt\r\n        template\r\n        subtitle\r\n        featuredImage\r\n      }\r\n    }\r\n\r\n    posts: allMarkdownRemark(\r\n      filter: { fields: { contentType: { eq: \"posts\" } } }\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date\r\n            categories {\r\n              category\r\n            }\r\n            featuredImage\r\n          }\r\n        }\r\n      }\r\n    }\r\n    postCategories: allMarkdownRemark(\r\n      filter: { fields: { contentType: { eq: \"postCategories\" } } }\r\n      sort: { order: ASC, fields: [frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAFA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAnDA;AACA;AAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAKA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAsBA;AAAA;AAEA;;;;;;;;;;AAtGA;AAYA;AASA;AAwDA;AAyBA;;;;;;;;;;;;;;A","sourceRoot":""}